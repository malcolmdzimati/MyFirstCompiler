import java.io.*;
import java.util.*;

class StaticSemanticAnalysis{
    SymbolNode root;
    int current;

    ArrayList<Hashtable<String, SymbolNode>> symbolTableVar = new ArrayList<Hashtable<String, SymbolNode>>();
    ArrayList<Hashtable<String, SymbolNode>> symbolTableFunc = new ArrayList<Hashtable<String, SymbolNode>>();
    Queue<SymbolNode> que=new LinkedList<>();

    public StaticSemanticAnalysis(SymbolNode root) {
        this.root = root;
    }

    public SymbolNode findProc(SymbolNode n, String procName)  {
        que.clear();
        que.add(n);       /* root node is added to the top of the queue */
        while (que.size() != 0){
            n = que.remove();
            for (SymbolNode kid : n.getChildren()) {
                if(kid.getValue().equals(procName)){
                    return kid.getParent();
                }else{
                    que.add(kid);
                }
            }
        }
        return null;
    }

    public SymbolNode findVar(SymbolNode n, String procName)  {
        que.clear();
        que.add(n);       /* root node is added to the top of the queue */
        while (que.size() != 0){
            n = que.remove();
            for (SymbolNode kid : n.getChildren()) {
                if(kid.getType().equals(procName)){
                    return kid;
                }else{
                    que.add(kid);
                }
            }
        }
        return null;
    }

    public void performScopeResolution(){
        SymbolNode man = findProc(root, "main");
        makeScopeVarSymbolTable(man, 0);

        SymbolNode tt = findVar(root, "Algorithm");
        for(SymbolNode k : tt.getChildren()){
            //System.out.println(k.getChildren().get(0).getValue()+" "+k.getType());
        }
        makeFunctionEntry(root, 0);
    }

    public void makeScopeVarSymbolTable(SymbolNode beginProc, int scID){
        SymbolNode beginVar = findVar(beginProc, "VarDecl");
        makeVaraibleEntry(beginVar, scID);
    }

    public void makeVaraibleEntry(SymbolNode beg, int scID){
        if(beg.getChildren().isEmpty()){
            return;
        }else if (beg.getChildren().size()==2){
                SymbolNode dec = beg.getChildren().get(0);
                String type = dec.getChildren().get(0).getChildren().get(0).getValue();
                String value = dec.getChildren().get(1).getChildren().get(0).getValue();
                dec.getChildren().get(1).setType(type);
                dec.getChildren().get(1).setScopeID(scID+"");

                getCurrentScA().put(value, dec.getChildren().get(1));
                System.out.println(type + " " +value);


                for(SymbolNode k : dec.getChildren()){
                    //System.out.println(k.getChildren().get(0).getValue()+" "+k.getType());
                }

        }else{
            //System.out.println("Array was found");
        }
    }

    public  void makeFunctionEntry(SymbolNode beg, int scID){
        if(beg.getType().equals("Branch")){
            enterNewScope();
            //scopeBranch(beg);
        }

        if (beg.getType().equals("Loop")){
            enterNewScope();
            //scopeLoop(beg);
        }

        if(beg.getType().equals("ProcDefs")){
            enterNewScope();
            scopeFC(beg, scID++);
        }

        if(beg.getValue().equals("pcall")){
            enterNewScope();
            //scopeFC(beg.getChildren().get(1).getValue());
        }
    }

    public void scopeFC(SymbolNode beg, int scID){
        if(beg==null)
            return;

        //makeScopeVarSymbolTable(beg, scID);

        for(SymbolNode k : beg.getChildren()){
            System.out.println(k.getValue()+" "+k.getType());
        }

        //scopeFC(beg.getChildren().get(1));
    }

    public void enterNewScope(){
        current++;
        symbolTableVar.get(current).clear();
        symbolTableFunc.get(current).clear();
    }

    public Hashtable<String, SymbolNode> getCurrentScF(){
        return symbolTableFunc.get(current);
    }

    public Hashtable<String, SymbolNode> getCurrentScA(){
        return symbolTableVar.get(current);
    }

    public void revertScope(){
        current--;
    }

    public SymbolNode lookUp(boolean isFunc, String value){
        if(isFunc){
            for(int i=0; i<=current; i++){
                if(symbolTableFunc.get(current-i).containsKey(value))
                    return symbolTableFunc.get(current).get(value);
            }
        }

        for(int i=0; i<=current; i++){
            if(symbolTableVar.get(current-i).containsKey(value))
                return symbolTableVar.get(current).get(value);
        }

        return null;
    }
}
